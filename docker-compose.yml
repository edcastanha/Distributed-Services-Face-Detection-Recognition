#DOCKER COMPOSE
#docker-compose up -d
version: '3.7'

services:

# Postgres
  secedu-pg-api:
    image: postgres
    container_name: secedu-pg-api
    restart: always
    environment:
      - POSTGRES_DB=secedu
      - POSTGRES_USER=secedu
      - POSTGRES_PASSWORD=ep4X1!br
    volumes:
      - 'B:\workspace\volumes\postgres:/var/lib/postgresql/data'
    ports:
      - 5432:5432
    networks:
      - secedu_dj_network

# Django
  secedu-dj-api:
    build:
      context: ./secedu-dj-api/
      dockerfile: Dockerfile
    container_name: secedu-dj-api
    command: "bash entrypoint.sh"
    depends_on:
      - secedu-pg-api
      - secedu-rmq-task
    restart: always
    environment:
      - PGDATABASE=secedu
      - PGUSER=secedu
      - PGPASSWORD=ep4X1!br
      - PGHOST=secedu-pg-api
      - PGPORT=5432
      - MYSECRET=insecure-v@f)l361(joj_3-ie-^=)r$rvv3d1l_v&2%o*_gf^dp*_%zb^8*¨%987GBJHGouY¨()*&%897gcybsa098d7c568
      - MYDEBUG=False
    volumes:
      - ./secedu-dj-api:/api
      - B:\workspace\volumes\medias:/api/medias/fotos/
    ports:
      - "7000:9000"
    networks:
      - secedu_dj_network


# RabbitMQ
  secedu-rmq-task:
    image: rabbitmq:3-management
    container_name: secedu-rmq-task
    restart: always
    volumes:
      - B:\workspace\volumes\rabbitMQ:/var/lib/rabbitmq/mnesia
    environment:
      - RABBITMQ_DEFAULT_USER=secedu
      - RABBITMQ_DEFAULT_PASS=ep4X1!br
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - secedu_dj_network
  
# Redis RediSearch 
  secedu-rds-tack:
    image:  redis/redis-stack
    container_name: secedu-rds-tack
    restart: always
    volumes:
        - B:\workspace\volumes\redis:/data
    ports:
        - "6379:6379" 
        - "8001:8001" 
    networks:
      - secedu_dj_network

# TASK ROTA CAMERAS
  secedu-jobs-rota-cameras-data:
    build:
        context: ./secedu-jobs-faces/
        dockerfile: Dockerfile
    command: python consumer-rota-cameras-data.py
  #  deploy:
  #    mode: replicas # Escolha o número de réplicas conforme necessário
  #    replicas: 2
    restart: always
    cap_add:
      - SYS_NICE  # Permite ajustar limites de recursos
    ulimits:
      memlock:
        soft: -1
        hard: -1
      stack:
        soft: 67108864
        hard: 67108864
    volumes:
      - ./secedu-jobs-faces/:/app
      - B:\workspace\volumes\capturas:/app/capturas
      - B:\SIPPE\FTP:/app/ftp
      - B:\workspace\volumes\dataset:/app/dataset
    networks:
      - secedu_dj_network


# TASK EXTRAIR FACES
  secedu-jobs-extrair-faces-files:
    build:
        context: ./secedu-jobs-faces/
        dockerfile: Dockerfile
    command: python consumer-extrair-faces-files.py
  #  deploy:
  #    mode: replicas # Escolha o número de réplicas conforme necessário
  #    replicas: 2
    restart: always
    cap_add:
      - SYS_NICE  # Permite ajustar limites de recursos
    ulimits:
      memlock:
        soft: -1
        hard: -1
      stack:
        soft: 67108864
        hard: 67108864
    volumes:
      - ./secedu-jobs-faces/:/app
      - B:\workspace\volumes\capturas:/app/capturas
      - B:\SIPPE\FTP:/app/ftp
      - B:\workspace\volumes\dataset:/app/dataset
    networks:
      - secedu_dj_network


networks:
  secedu_dj_network:
    driver: bridge


    
# Flask
#  secedu-flask:
#    build:
#        context: ./secedu-fk-task/
#        dockerfile: Dockerfile
#    #command: python consumer-extrair-faces-files.py
#  #  deploy:
#  #    mode: replicas # Escolha o número de réplicas conforme necessário
#  #    replicas: 2
#    restart: always
#    volumes:
#      - B:/workspace/volumes/capturas/:/app/capturas
#      - B:/SIPPE/FTP/:/app/ftp
#    networks:
#      - secedu_rmq_network
#      - secedu_rds_network