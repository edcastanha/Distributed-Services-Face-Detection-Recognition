#DOCKER COMPOSE
#docker-compose up -d
version: '3.7'

services:

## Autenticacao e Autirizacao

  # MySQL
  secedu-mysql-auth:
    image: mysql:8.0.30-debian
    container_name: secude-mysql-auth
    restart: always
    environment:
      - MYSQL_DATABASE=secedu
      - MYSQL_ROOT_PASSWORD=ep4X1!br
    volumes:
      - ./volumes/mysql:/var/lib/mysql
    networks:
      - secedu_kc_network
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 3

  # Keycloak
  secedu-key-auth:
    image: quay.io/keycloak/keycloak:22.0.1
    command: start-dev
    container_name: secedu-auth-api
    depends_on:
      secedu-mysql-auth:
        condition: service_healthy
    #restart: always
    environment:
      - KEYCLOAK_ADMIN=secedu
      - KEYCLOAK_ADMIN_PASSWORD=ep4X1!br
      # altere estes valores para apontar para uma instância postgres em execução
      - KC_DB=mysql
      - KC_DB_URL=jdbc:mysql://secedu-mysql-auth:3306/secedu
      - KC_DB_USERNAME=root
      - KC_DB_PASSWORD=ep4X1!br
    volumes:
        - ./volumes/auth/realm/:/opt/keycloak/data/realm
    ports:
      - "8000:8080"
    networks:
      - secedu_dj_network
      - secedu_kc_network

  # Postgres
  secedu-pg-api:
    image: postgres
    container_name: secedu-pg-api
    restart: always
    environment:
      - POSTGRES_DB=secedu
      - POSTGRES_USER=secedu
      - POSTGRES_PASSWORD=ep4X1!br
    volumes:
      - './volumes/postgres:/var/lib/postgresql/data'
    networks:
      - secedu_dj_network

  # Django
  secedu-dj-api:
    build:
      context: ./secedu-dj-api/
      dockerfile: Dockerfile
    container_name: secedu-dj-api
    depends_on:
      - secedu-pg-api
      - secedu-rmq-task
    restart: always
    environment:
      - PGDATABASE=secedu
      - PGUSER=secedu
      - PGPASSWORD=ep4X1!br
      - PGHOST=secedu-pg-api
      - PGPORT=5432
      - MYSECRET=insecure-v@f)l361(joj_3-ie-^=)r$rvv3d1l_v&2%o*_gf^dp*_%zb^8*¨%987GBJHGouY¨()*&%897gcybsa098d7c568
      - MYDEBUG=False
    volumes:
      - ./secedu-dj-api:/api
      - ./volumes/dataset:/api/medias/dataset
    ports:
      - "9000:9000"
    networks:
      - secedu_dj_network
    command: ["gunicorn", "--workers=1", "--timeout=3600", "--bind=0.0.0.0:9000", "core.wsgi"]
  
  # Flask
  secedu-fk-task:
    #image: secedu-fk-task:latest
    build: 
      context: ./secedu-fk-task/app/
      dockerfile: Dockerfile
    container_name: secedu-fk-task
    depends_on:
      - secedu-rds-tack
      - secedu-rmq-task
    restart: always
    volumes:
      - ./secedu-fk-task/app/api/:/app
      - ./volumes/dataset:/app/dataset
    ports:
      - "5000:5000"
    networks:
      - secedu_rmq_network
      - secedu_rds_network
  
  # RabbitMQ
  secedu-rmq-task:
    image: rabbitmq:3-management
    container_name: secedu-rmq-task
    restart: always
    volumes:
      - ./volumes/rabbitMQ:/var/lib/rabbitmq/mnesia
    environment:
      - RABBITMQ_DEFAULT_USER=secedu
      - RABBITMQ_DEFAULT_PASS=ep4X1!br
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - secedu_rmq_network
  
  # Redis-Stack RediSearch 
  secedu-rds-tack:
    image:  redis/redis-stack:latest
    container_name: secedu-rds-tack
    restart: always
    environment:
        - REDIS_PASSWORD=ep4X1!br
        - REDIS_USER=secedu
    volumes:
        - ./volumes/redis:/data
    ports:
        - "6379:6379" 
        - "8001:8001" 
    networks:
        - secedu_rds_network

networks:
  secedu_kc_network:
    driver: bridge
  secedu_dj_network:
    driver: bridge
  secedu_rds_network:
    driver: bridge
  secedu_rmq_network:
    driver: bridge



